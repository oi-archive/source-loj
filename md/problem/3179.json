{"title":"「IOI2019」视觉程序","time_limit":1000,"memory_limit":1024,"tags":["IOI","2019"],"operation":{"submit":"https://loj.ac/problem/3179#submit_code","submissions":"https://loj.ac/submissions?problem_id=3179","statistics":"https://loj.ac/problem/3179/statistics/fastest","testdata":"https://loj.ac/problem/3179/testdata","discussion":"https://loj.ac/discussion/problem/3179"},"statement":[{"title":"题目描述","type":"description","format":"markdown","require":["katex"],"content":"注意：**在 LibreOJ 上，由于语言限制，目前只支持以下语言的提交：**\r\n- C++\r\n- C++ (NOI)\r\n- C++ 11\r\n- C++ 11 (Clang)\r\n- C++ 11 (NOI)\r\n- C++ 17\r\n- C++ 17 (Clang)\r\n\r\n你在给机器人编写一个视觉程序。\r\n每次机器人的摄像头拍下一张照片时，图像将以黑白图像的形式存储在机器人的内存中。\r\n每张图像是由像素构成的 $H \\times W$ 网格。图像的行从 $0$ 到 $H-1$ 编号，列从 $0$ 到 $W-1$ 编号。\r\n每张图像含有**恰好两个**黑色像素，其他像素均为白色。\r\n\r\n机器人可以用简单指令构成的程序来处理图像。\r\n给出 $H,W$ 和一个正整数 $K$ 的值，你的目标是要编写一个函数，用来为机器人生成程序。该程序需要判定图像中两个黑色像素的距离是否正好为 $K$。\r\n这里，在第 $r_1$ 行及第 $c_1$ 列上的像素与第 $r_2$ 行及第 $c_2$ 列上的像素之间的距离定义为 $|r_1 - r_2| + |c_1 - c_2|$。\r\n在这个式子中，$|x|$ 表示 $x$ 的绝对值，即当 $x \\ge 0$ 时，其值为 $x$，而当 $x < 0$ 时，其值为 $-x$。\r\n\r\n下面描述机器人是如何运作的。\r\n\r\n机器人的内存有足够多的存储单元，从 $0$ 开始编号。每个存储单元可以保存 $0$ 或 $1$，且它的内容一旦设置后就不可更改。\r\n图像一行接一行地保存在存储单元里，这些存储单元的编号从 $0$ 到 $H \\cdot W - 1$。\r\n第一行保存在存储单元 $0$ 到 $W - 1$ 里，最后一行保存在存储单元 $(H - 1)W$ 到 $H \\cdot W - 1$ 里。\r\n特别地，如果位于第 $i$ 行第 $j$ 列上的那个像素是黑色的，则保存在存储单元 $i \\cdot W + j$ 里的值为 $1$，否则为 $0$。\r\n\r\n机器人的程序是一个**指令**的序列，这些指令用从 $0$ 开始的连续整数进行编号。在程序运行时，指令将一条一条地被执行。\r\n每条指令读取一个或多个存储单元的值（我们将这些值称为指令的**输入**），同时产生一个 $0$ 或 $1$ 的值（我们称之为指令的**输出**）。\r\n指令 $i$ 的输出将会保存在存储单元 $H \\cdot W + i$ 中。\r\n指令 $i$ 的输入只能是保存图像的存储单元，或者是保存之前指令输出的存储单元，也就是编号为从 $0$ 到 $H \\cdot W + i - 1$ 的存储单元。\r\n\r\n机器人共有四种指令：\r\n- $\\texttt{NOT}$：有唯一一个输入。若输入为 $0$ 时，其输出为 $1$，否则为 $0$。\r\n- $\\texttt{AND}$：有一个或多个输入。其输出为 $1$ 当且仅当输入**全部**为 $1$。\r\n- $\\texttt{OR}$：有一个或多个输入。其输出为 $1$ 当且仅当输入中**至少有一个** $1$。\r\n- $\\texttt{XOR}$：有一个或多个输入。其输出为 $1$ 当且仅当输入中 $1$ 的个数是**奇数**。\r\n\r\n如果两个黑色像素之间的距离正好为 $K$，则最后一条指令的输出应为 $1$，否则输出应为 $0$。\r\n\r\n#### 实现细节\r\n你需要实现以下函数：\r\n\r\n```cpp\r\nvoid construct_network(int H, int W, int K)\r\n```\r\n- $H,W$：机器人摄像头所拍到的图像的尺寸\r\n- $K$：一个正整数\r\n- 这个函数需要生成一个机器人的程序。对于机器人摄像头所拍到的每幅图像，该程序应判定图像中两个黑色像素之间的距离是否正好为 $K$。\r\n\r\n该程序应当通过调用以下函数将指令追加到机器人的程序中（最初机器人的程序是空的）：\r\n```cpp\r\nint add_not(int N)\r\nint add_and(int[] Ns)\r\nint add_or(int[] Ns)\r\nint add_xor(int[] Ns)\r\n```\r\n- 分别追加一条 $\\texttt{NOT},\\texttt{AND},\\texttt{OR}$ 或 $\\texttt{XOR}$ 指令。\r\n- $N$（对于 $\\texttt{add_not}$ 而言）：要追加的 $\\texttt{NOT}$ 指令的输入存储单元编号\r\n- $Ns$（对于 $\\texttt{add_and},\\texttt{add_or},\\texttt{add_xor}$ 而言）：要追加的 $\\texttt{AND},\\texttt{OR}$ 或 $\\texttt{XOR}$ 指令的输入存储单元的编号的数组\r\n- 每次函数调用都会返回追加指令的输出存储单位的编号。对这些函数的连续调用将会返回从 $H \\cdot W$ 开始的连续整数。\r\n\r\n机器人的程序最多可以包含 $10^4$ 条指令。这些指令一共最多只能读入 $10^6$ 个值。\r\n换句话说，所有 $\\texttt{add_and},\\texttt{add_or}$ 及 $\\texttt{add_xor}$ 调用中的 $Ns$ 数组的长度总和再加上 $\\texttt{add_not}$ 调用的次数不得超过 $10^6$。\r\n\r\n当追加完最后一条指令后，函数 $\\texttt{construct_network}$ 必须返回。\r\n所产生的机器人程序会在一些图像上进行评测。对于一幅图像，程序最后一条指令的输出是 $1$ 当且仅当两个黑色像素之间的距离正好为 $K$。\r\n如果对测试点中的每幅图像，你的解答所产生的程序都可以正确地输出结果，那就通过了该测试点。\r\n\r\n评测程序在评测你的程序时可能会出现以下错误信息：\r\n- $\\texttt{Instruction with no inputs}$：一个空数组被作为 $\\texttt{add_and},\\texttt{add_or}$ 或 $\\texttt{add_xor}$ 的输入。\r\n- $\\texttt{Invalid index}$：给 $\\texttt{add_not},\\texttt{add_and},\\texttt{add_or}$ 或 $\\texttt{add_xor}$ 提供了不正确（可能是负数）的存储单元编号作为输入。\r\n- $\\texttt{Too many instructions}$：你的函数尝试添加多于 $10^4$ 条的指令。\r\n- $\\texttt{Too many inputs}$：程序中的指令一共读取了多于 $10^6$ 个值。\r\n\r\n#### 评测程序示例\r\n评测程序示例读取下述格式的输入：\r\n- 第 $1$ 行：$H\\ W\\ K$\r\n- 第 $2 + i$ 行 $(i \\ge 0)$：$r_1[i]\\ c_1[i]\\ r_2[i]\\ c_2[i]$\r\n- 最后一行：$-1$\r\n\r\n除第一行和最后一行外，每一行都表示了一幅含有两个黑色像素的图像。\r\n记第 $2+i$ 行上的图像为图像 $i$。该图像中，一个黑色像素位于第 $r_1[i]$ 行及第 $c_1[i]$ 列上，令一个黑色像素位于第 $r_2[i]$ 行及第 $c_2[i]$ 列上。\r\n\r\n评测程序首先调用 $\\texttt{construct_network(H, W, K)}$。若 $\\texttt{construct_network}$ 违反了题目描述中的限制条件，评测程序示例将会输出在实现细节一节末尾所列举的某条错误信息并退出。\r\n\r\n否则，评测程序示例将输出两部分内容。\r\n\r\n首先，评测程序示例会以下列格式输出机器人程序所产生的输出：\r\n- 第 $1 + i$ 行（$0 \\le i$）：对于图像 $i$，机器人程序最后一条指令的输出（$1$ 或 $0$）。\r\n\r\n其次，评测程序示例会以下列格式输出到当前目录下一个名为 $\\texttt{log.txt}$ 的文件中：\r\n- 第 $1 + i$ 行（$0 \\le i$）：$m[i][0]\\ m[i][1]\\ \\dots\\ m[i][c-1]$\r\n\r\n在第 $1 + i$ 行上的序列描述以图像 $i$ 作为输入时，在机器人程序运行结束后放在内存中的数据。\r\n具体来说，$m[i][j]$ 是保存在存储单元 $j$ 里面的值。注意，$c$ 的值（序列长度）等于 $H \\cdot W$ 再加上机器人程序的指令数。"},{"title":"样例","type":"example","format":"markdown","require":["katex"],"content":"假设 $H = 2,W = 3,K = 3$。在此情况下，两个黑色像素之间的距离为 $3$ 的图像只有两种。\r\n\r\n![Sample](https://loj-img.upyun.menci.memset0.cn/2019/08/09/5d4d673fe5a9c.png)\r\n\r\n- 情况一：黑色像素是 $0$ 和 $5$。\r\n- 情况二：黑色像素是 $2$ 和 $3$。\r\n\r\n一种可行的方案是通过以下调用来构造机器人程序：\r\n1. $\\texttt{add_and([0, 5])}$，将加入一条指令，当且仅当图像符合情况一时其输出为 $1$。输出结果将保存在存储单元 $6$ 里。\r\n2. $\\texttt{add_and([2, 3])}$，将加入一条指令，当且仅当图像符合情况二时其输出为 $1$。输出结果将保存在存储单元 $7$ 里。\r\n3. $\\texttt{add_or([6, 7])}$，将加入一条指令，当且仅当上述两种情况之一成立时其输出为 $1$。"},{"title":"数据范围与提示","type":"limit_and_hint","format":"markdown","require":["katex"],"content":"对于所有数据：\r\n- $1 \\le H,W \\le 200$；\r\n- $2 \\le H \\cdot W$；\r\n- $1 \\le K \\le H + W - 2$。\r\n\r\n详细子任务附加限制与分值如下表：\r\n\r\n| 子任务编号 |                           附加限制                           | 分值 |\r\n| :--------: | :----------------------------------------------------------: | :--: |\r\n|    $1$     |                     $\\max(H,W) \\le 3$                        | $10$ |\r\n|    $2$     |                     $\\max(H,W) \\le 10$                       | $11$ |\r\n|    $3$     |                     $\\max(H,W) \\le 30$                       | $11$ |\r\n|    $4$     |                     $\\max(H,W) \\le 100$                      | $15$ |\r\n|    $5$     |                       $\\min(H,W) = 1$                        | $12$ |\r\n|    $6$     |     每幅图像上位于第 $0$ 行且位于第 $0$ 列的那个像素是黑色的         | $8$ |\r\n|    $7$     |                           $K = 1$                            | $14$ |\r\n|    $8$     |                      没有任何附加限制                           | $19$ |"}]}