{"title":"「SHOI2011」改进代码","time_limit":1000,"memory_limit":128,"tags":["SHOI","2011"],"operation":{"submit":"https://loj.ac/problem/2581#submit_code","submissions":"https://loj.ac/submissions?problem_id=2581","statistics":"https://loj.ac/problem/2581/statistics/fastest","testdata":"https://loj.ac/problem/2581/testdata","discussion":"https://loj.ac/discussion/problem/2581"},"statement":[{"title":"题目描述","type":"description","format":"markdown","require":["katex"],"content":"PP 写了两段对数组进行操作的代码。   \r\n\r\n对于 Pascal 选手，两段代码分别如下：     \r\n\r\n```pascal\r\nprocedure operate1(l, r, c : longint);\r\nvar\r\n    i : longint;\r\nbegin\r\n    for i := l to r do\r\n        a[i] := (a[i] + c) mod p;\r\nend;\r\n\r\nprocedure operate2(l, r : longint);\r\nvar\r\n    i, cnt : longint;\r\nbegin\r\n    cnt := 0;\r\n    for i := l to r - 1 do\r\n        if a[i] > a[i + 1]\r\n            then cnt := cnt + 1;\r\n    writeln(cnt);\r\nend;\r\n\r\n```\r\n\r\n对于 C / C++ 选手，两段代码分别如下：     \r\n```c++\r\nvoid operate1(int l, int r, int c)\r\n{\r\n    int i;\r\n    for (i = l; i <= r; ++i)\r\n        a[i] = (a[i] + c) % p;\r\n}\r\n\r\nvoid operate2(int l, int r)\r\n{\r\n    int i, cnt = 0;\r\n    for (i = l; i < r; ++i)\r\n        if (a[i] > a[i + 1])\r\n            ++cnt;\r\n    printf(\"%d\\n\", cnt);\r\n}\r\n```\r\n\r\n于是，主程序就可以通过调用这两个子程序对数组 $a_i$ 进行操作，下面是示例代码。\r\n\r\n对于 Pascal 选手，代码如下：\r\n\r\n```pascal\r\nbegin\r\n    operate1(1, 4, 3);\r\n    operate1(4, 7, 4);\r\n    operate2(1, 7);\r\nend.\r\n```\r\n\r\n对于 C / C++ 选手，代码如下：\r\n\r\n```c++\r\nint main()\r\n{\r\n    operate1(1, 4, 3);\r\n    operate1(4, 7, 4);\r\n    operate2(1, 7);\r\n}\r\n```\r\n\r\n但是 QQ 觉得 PP 的程序效率太低了，他想请你优化 PP 的代码。即，对于一段只包含 `operate1` 、 `operate2` 两种语句的主程序以及运行之前数组 $a_i$ 的初始值，请你计算出他的输出。"},{"title":"输入格式","type":"input_format","format":"markdown","require":["katex"],"content":"输入的第一行包含三个整数 $n,m,p$ 。其中 $n$ 是操作中 $l,r$ 的上界， $m$ 是主程序中的语句数，  $p$ 是程序中的常数 $p$ 的值。      \r\n接下去 $n$ 行每行一个整数，依次是 $ a_1,a_2,\\dots,a_n$ 的初始化的值。输入保证这些值都在 $ 0,1,\\dots,p-1$ 之中。    \r\n接下去 $m$ 行每行依次描述主程序的一行代码。每一行的格式为下面两者之一：     \r\n - `1 l r c` : 表示代码 `operate1(l, r, c);` 。\r\n - `2 l r ` : 表示代码 `operate2(l, r);` 。\r\n"},{"title":"输出格式","type":"output_format","format":"markdown","require":["katex"],"content":"输出即为输入对应的程序的输出。"},{"title":"样例","type":"example","format":"markdown","require":["katex"],"content":"#### 样例输入 1\r\n```plain\r\n7 3 7\r\n2\r\n5\r\n3\r\n0\r\n3\r\n1\r\n2\r\n1 1 4 3\r\n1 4 7 4\r\n2 1 7\r\n```\r\n\r\n#### 样例输出 1\r\n```plain\r\n2\r\n```\r\n\r\n#### 样例输入 2\r\n```plain\r\n5 5 2\r\n1\r\n0\r\n0\r\n1\r\n0\r\n2 1 4\r\n2 1 5\r\n1 3 5 1\r\n2 1 4\r\n2 1 3\r\n```\r\n\r\n#### 样例输出 2\r\n```plain\r\n1\r\n2\r\n2\r\n1\r\n```"},{"title":"数据范围与提示","type":"limit_and_hint","format":"markdown","require":["katex"],"content":"| 数据编号 |                   数据限制                   |     \r\n| :--: | :--------------------------------------: |    \r\n|  1   |        $ n \\le 1000 , m\\le 2000$         |    \r\n| 2~3  | $n\\le 100000,m\\le 200000,c\\le1,a_i\\le100000,p>500000$ |     \r\n|  4   |    $n\\le 100000,m\\le 200000,l=1,r=n$     |    \r\n| 5~6  | $n\\le 100000,m\\le 200000$ 且对于所有 `operate1` 的参数都有 $l=1,r=n$ |    \r\n| 7~10 |        $n\\le 100000,m\\le 200000$         |    \r\n\r\n保证 $1 \\le l \\le r \\le n,0 \\le c \\le 10^8,p \\le 10^6$.\r\n"}]}