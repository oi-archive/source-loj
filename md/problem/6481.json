{"title":"「ICPC World Finals 2017」Visual Python++","time_limit":5000,"memory_limit":1024,"tags":["2017","ICPC","World Final"],"operation":{"submit":"https://loj.ac/problem/6481#submit_code","submissions":"https://loj.ac/submissions?problem_id=6481","statistics":"https://loj.ac/problem/6481/statistics/fastest","testdata":"https://loj.ac/problem/6481/testdata","discussion":"https://loj.ac/discussion/problem/6481"},"statement":[{"title":"题目描述","type":"description","format":"markdown","require":["katex"],"content":"在最近被提出的 Visual Python++ 编程语言中，一个语句块被表示为一个由字符组成的矩形，其中左上角在 $r_1$ 行 $c_1$ 列，右下角在 $r_2$ 行 $c_2$ 列。对于 $r_1 \\leq r \\leq r_2$, $c_1 \\leq c \\leq c_2$ ，所有位于 $(r, c)$ 的字符被认为是属于这个块的内容。在这些位置中，满足 $r = r_1$ 或 $r = r_2$ 或 $c = c_1$ 或 $c = c_2$ 的位置被称为是边界。\r\n\r\n语句块可以嵌套（矩形包含在其他矩形中）任意层。在语法正确的程序中，任意两个语句块要么是嵌套的（一个包含在另一个中），要么是不交的（不重叠）。在这两种情况中，他们的边界也不能重叠。\r\n\r\n编程人员不需要画出经典程序中的所有矩形，这太浪费时间了，而且 Visual Python++ 也不可能称为下一个 ICPC 编程语言。因此程序员只需要在左上角位置放一个字符 `┌`，在右下角位置放一个字符 `┘`。解析器会自动匹配相应的拐角来获取程序的嵌套结构。\r\n\r\n你的团队刚刚获得了五小时的合同来开发解析器的这一部分。\r\n"},{"title":"输入格式","type":"input_format","format":"markdown","require":["katex"],"content":"第一行包含一个整数 $n$ $(1 \\leq n \\leq 10^5)$，表示拐角对的数量。\r\n\r\n接下来 $n$ 行，每行包含两个整数 $r$ 和 $c$ $(1 \\leq r, c \\leq 10^9)$，指定 $r$ 行 $c$ 列为一个左上角。\r\n\r\n接下来 $n$ 行以相同的方式指定了右下角。\r\n\r\n所有的拐角位置互不相同。\r\n"},{"title":"输出格式","type":"output_format","format":"markdown","require":["katex"],"content":"输出 $n$ 行，每行包含一个整数。第 $i$ 行的整数 $j$ 表示第 $i$ 个左上角和第 $j$ 个右下角组成一个矩形。左上角和右下角均按照他们在输入中的顺序从 $1$ 到 $n$ 标号。输出必须是 $1$ 到 $n$ 的排列，从而匹配可能嵌套的矩形。如果存在超过一种合法的匹配，任意一组合法的匹配都是可接受的。如果不存在合法的匹配，输出 `syntax error`。\r\n"},{"title":"样例","type":"example","format":"markdown","require":["katex"],"content":"#### 样例输入 1\r\n```plain\r\n2\r\n4 7\r\n9 8\r\n14 17\r\n19 18\r\n```\r\n\r\n#### 样例输出 1\r\n```plain\r\n2\r\n1\r\n```\r\n\r\n#### 样例输入 2\r\n```plain\r\n2\r\n4 7\r\n14 17\r\n9 8\r\n19 18\r\n```\r\n\r\n#### 样例输出 2\r\n```plain\r\n1\r\n2\r\n```\r\n\r\n#### 样例输入 3\r\n```plain\r\n2\r\n4 8\r\n9 7\r\n14 18\r\n19 17\r\n```\r\n\r\n#### 样例输出 3\r\n```plain\r\nsyntax error\r\n```\r\n\r\n#### 样例输入 4\r\n```plain\r\n3\r\n1 1\r\n4 8\r\n8 4\r\n10 6\r\n6 10\r\n10 10\r\n```\r\n\r\n#### 样例输出 4\r\n```plain\r\nsyntax error\r\n```\r\n"}]}