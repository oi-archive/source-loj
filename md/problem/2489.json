{"title":"「2018 集训队互测 Day 4」小修和小栋猜♂数字","time_limit":4000,"memory_limit":512,"tags":["2018","集训队互测","交互题"],"operation":{"submit":"https://loj.ac/problem/2489#submit_code","submissions":"https://loj.ac/submissions?problem_id=2489","statistics":"https://loj.ac/problem/2489/statistics/fastest","testdata":"https://loj.ac/problem/2489/testdata","discussion":"https://loj.ac/discussion/problem/2489"},"statement":[{"title":"题目描述","type":"description","format":"markdown","require":["katex"],"content":"这是一道**交互题**。\r\n\r\n小修和小栋喜欢玩一个叫做猜数字的游戏。\r\n小修会先在心中想好一个包含 $n$ 个互不相同的正整数的序列 $a_1,a_2,\\dots,a_n$。\r\n小栋每次会向小修询问 $a_x,a_y,a_z$ 的中位数，小修会准确地回答。然后小栋则需要利用这些信息来尽可能地还原出序列 $a$。\r\n然而小修实在是太厉害了，选取的 $n$ 都会特别大，导致小栋根本不知如何处理。\r\n请你帮助小栋，让他能和小修愉快地玩耍。\r\n\r\n### 任务介绍\r\n你需要实现一个函数 `guess()`，以帮助小栋完成游戏。\r\n\r\n* `guess(n)`\r\n * `n` 为序列的长度。\r\n\r\n在每个测试点中，交互库都会调用恰好一次 `guess()` 函数。\r\n\r\n你可以调用函数 `ask()` 来向小修进行询问。我们会根据你调用这个函数的**总次数**评分。\r\n\r\n* `ask(x,y,z)`\r\n * `x,y,z` 为三个不同的下标\r\n * 这个函数会返回 $a_x,a_y,a_z$ 的中位数。\r\n\r\n同时，你还可以调用函数 `answer()` 来回答你还原出的信息。\r\n\r\n* `answer(x,v)`\r\n * `x` 为还原出的数的下标\r\n * `v` 为还原出的 $a_x$ 的值\r\n\r\n你不能对于同一个 $x$ 进行两次调用，但可以对于某些 $x$ 不进行调用，表示你不能还原出这个下标上的值。\r\n\r\n### 实现方法\r\n本题只对 C/C++ 提供函数接口。其他语言请使用标准输入/输出进行交互。\r\n\r\n源代码中需要包含头文件 `guess.h`。\r\n\r\n你需要实现的函数 `guess()`:\r\n```cpp\r\nvoid guess(int n);\r\n```\r\n\r\n函数 `ask()` 的接口信息如下：\r\n```cpp\r\nint ask(int x,int y,int z);\r\n```\r\n\r\n函数 `answer()` 的接口信息如下：\r\n```cpp\r\nvoid answer(int x,int v);\r\n```\r\n\r\n### 如何测试你的程序\r\n你需要在本题目录下使用如下命令编译得到可执行程序：\r\n```plain\r\ng++ -o guess grader.cpp guess.cpp -O2\r\n```\r\n\r\n可执行文件将从**标准输入**读取以下格式的数据：\r\n\r\n第一行包含一个正整数 $n$，需要保证 $n \\leq 10^5$。\r\n\r\n第二行一共 $n$ 个正整数，$a_1,a_2,\\dots,a_n$，需要保证 $a_i$ 互不相同且 $0 < a_i \\leq 10^9$。\r\n\r\n读入完成之后，交互库将会调用 `guess()` 函数。\r\n\r\n接下来交互库将会在**标准输出**中输出以下信息：\r\n\r\n第一行一共 $n$ 个正整数，$b_1,b_2,\\ldots,b_n$，表示你还原出的序列，$b_i=-1$ 表示你没有还原出该下标上的值。\r\n\r\n第二行形如 `Count: cnt`，`cnt` 为你调用函数 `ask()` 的次数。\r\n\r\n### 样例源代码\r\n在本题目录下，有 C++ 语言的样例源代码 `guess.cpp`。按照上文中提到的方式进行编译，即能通过编译得到可执行程序。\r\n\r\n样例源代码只是帮助理解题目，结果**不一定正确**。\r\n\r\n### 其他语言\r\n\r\nC/C++ 以外的语言可以通过标准输入输出进行交互。\r\n\r\n程序开始时，从标准输入读入一行，包含正整数 $n$。\r\n\r\n此后，需要调用 `ask()` 时，向标准输出输出一行 `Ask <x> <y> <z>` 并刷新输出缓冲（例如 Pascal 语言的 `flush(output)` 和 Java 语言的 `System.out.flush()`，其他语言请参阅语言文档）；此后从标准输入读入一行，包含一个整数，表示询问结果。\r\n\r\n需要调用 `answer()` 时，向标准输出输出一行 `Answer <x> <v>` 并刷新输出缓冲。\r\n\r\n程序结束时输出一行 `Finish` 并退出。\r\n\r\n所有输出同样需要满足上述限制。"},{"title":"样例","type":"example","format":"markdown","require":["katex"],"content":"#### 样例输入 1\r\n```plain\r\n3\r\n1 2 3\r\n```\r\n#### 样例输出 1\r\n```plain\r\n1 2 3\r\nCount: 1\r\n```\r\n#### 样例解释 1\r\n这是使用试题目录的 `grader` 和样例源程序得到的输出文件。\r\n\r\n#### 样例输入 2\r\n见「附加文件」中的 `guess2.in`。"},{"title":"数据范围与提示","type":"limit_and_hint","format":"markdown","require":["katex"],"content":"对于每个测试点，我们将会用你的运行结果与标称的运行结果进行比较，如果还原出来的数列不一致，你将获得 0 分。否则令你和标程调用函数 `ask()` 的次数分布为 $Y$ 和 $S$，若 $Y \\leq S$ 则你的得分比例为 $100\\%$，否则你的得分比例为 $(10*2^{4-\\frac{Y}{S}}+20)\\%$。\r\n\r\n对于每个子任务，你的得分将是所有测试点的得分取最小值并乘上该子任务分值的结果。\r\n\r\n子任务 1（20分）：$n \\leq 10$；  \r\n子任务 2（20分）：$n \\leq 100$；  \r\n子任务 3（20分）：$n \\leq 2000$；  \r\n子任务 4（40分）：$n \\leq 100000$。\r\n\r\n请注意最终测评使用的 `guess.h` 与下发的文件并不一致。"}]}