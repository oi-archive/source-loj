{"title":"「JOISC 2019 Day1」聚会","time_limit":2000,"memory_limit":268,"tags":["JOISC","2019","随机化","分治","交互题"],"operation":{"submit":"https://loj.ac/problem/3031#submit_code","submissions":"https://loj.ac/submissions?problem_id=3031","statistics":"https://loj.ac/problem/3031/statistics/fastest","testdata":"https://loj.ac/problem/3031/testdata","discussion":"https://loj.ac/discussion/problem/3031"},"statement":[{"title":"题目描述","type":"description","format":"markdown","require":["katex"],"content":"**题目译自 [JOISC 2019](https://www.ioi-jp.org/camp/2019/2019-sp-tasks/index.html) Day1 T2「[ビーバーの会合](https://www.ioi-jp.org/camp/2019/2019-sp-tasks/day1/meetings.pdf) / [Meetings](https://www.ioi-jp.org/camp/2019/2019-sp-tasks/day1/meetings-en.pdf)」**\r\n\r\n有 $N$ 座住有海狸的岛屿，编号从 $0$ 至 $N - 1$。这些岛由 $N - 1$ 条双向桥梁连接，使得两两互相可达。**保证每个岛屿至多连出 $\\mathbf{18}$ 座桥**。每个岛住有一只海狸。\r\n\r\n有时，一些海狸会赶往同一个岛屿进行聚会。当三只海狸进行聚会的时候，它们会按照这一规则选择聚会的岛屿：\r\n- 找到一个岛屿，使得三只海狸到达这个岛屿的距离之和是最小的，可以证明这样的岛屿是唯一的。\r\n这个岛屿可以是其中某一个海狸的家。\r\n\r\n你的任务是找出这 $N$ 座岛屿的连接方式。为了获取信息，你可以问海狸这样一个问题：\r\n- 给出三个不同的岛屿 $u, v, w$。\r\n- 询问这三座岛屿上的海狸会赶往聚会的岛屿。\r\n\r\n#### 实现细节\r\n\r\n你的程序在开头需包含头文件 `meetings.h`，并实现函数：\r\n```cpp\r\nvoid Solve(int N)\r\n```\r\n该函数每个测试点会被调用一次，参数 `N` 表示岛屿的数量 $N$。\r\n\r\n你的程序可以调用函数：\r\n```cpp\r\nint Query(int u, int v, int w)\r\n```\r\n- 表示询问来自岛屿 $u,v,w$ 的海狸聚会的位置岛屿。\r\n- 参数需要满足 $0\\le u,v,w \\le N - 1$ 且 $u\\neq v, u\\neq w, v\\neq w$，否则会被判定为 `Wrong Answer [1]`。\r\n- 你的程序运行时调用该函数的次数不能超过 $10^5$ 次，否则会被判定为 `Wrong Answer [2]`。\r\n```cpp\r\nvoid Bridge(int u, int v)\r\n```\r\n- 表示你确认了 $u,v$ 间有一座桥。\r\n- 参数需满足 $0\\le u < v\\le N - 1$，否则会被判定为 `Wrong Answer [3]`。\r\n- 如果事实上 $u,v$ 间不存在桥，会被判定为 `Wrong Answer [4]`。\r\n- 如果一组 $u,v$ 被调用了多次，会被判定为 `Wrong Answer [5]`。\r\n- 运行时此函数应被恰被调用 $N - 1$ 次，否则会被判定为 `Wrong Answer [6]`。\r\n\r\n#### 注意事项\r\n\r\n- 你可以定义一些其他的函数和全局变量。\r\n- 你的程序中不允许进行标准输入输出，但可以通过错误流进行输出。\r\n\r\n#### 编译与运行方法\r\n\r\n在下发文件中有一个样例评测程序 `grader.cpp`，假设你的文件是 `meetings.cpp`，将 `grader.cpp`、`meetings.h`、`meetings.cpp` 放置在同一个目录下，运行：\r\n```\r\ng++ -std=gnu++14 -O2 -o grader grader.cpp meetings.cpp\r\n```\r\n会生成一个可执行文件 `grader`，他通过标准输入输出流进行输入和输出。\r\n"},{"title":"输入格式","type":"input_format","format":"markdown","require":["katex"],"content":"**指样例评测程序输入格式。**\r\n\r\n第一行读入一个正整数 $N$。\r\n\r\n接下来 $N - 1$ 行，每行两个整数 $A,B$，表示岛屿 $A,B$ 间有一座桥。\r\n"},{"title":"输出格式","type":"output_format","format":"markdown","require":["katex"],"content":"**指样例评测程序输出格式。**\r\n\r\n如果你的程序满足要求，输出 `Accepted: 100`。\r\n\r\n如果你的程序被判定为答案错误，输出形如 `Wrong Answer [1]`。\r\n"},{"title":"样例","type":"example","format":"markdown","require":["katex"],"content":"#### 样例输入 1\r\n\r\n```plain\r\n5\r\n0 1\r\n0 2\r\n1 3\r\n1 4\r\n```\r\n#### 样例交互\r\n\r\n| 函数调用 | 函数调用 | 返回值 |\r\n|:-:|:-:|:-:|\r\n| `Solve(5)` |  |  |\r\n|  | `Query(0, 1, 2)` | `0` |\r\n|  | `Query(0, 3, 4)` | `1` |\r\n|  | `Bridge(1, 3)` |  |\r\n|  | `Bridge(0, 2)` |  |\r\n|  | `Bridge(1, 4)` |  |\r\n|  | `Bridge(0, 1)` |  |"},{"title":"数据范围与提示","type":"limit_and_hint","format":"markdown","require":["katex"],"content":"所有数据满足下列条件。$A_i, B_i$ 的含义参照「样例评测程序输入格式」一节。\r\n- $3 \\le N \\le 2000$\r\n- $0 \\le A_i, B_i \\le N - 1$\r\n- 保证岛屿之间两两互相可达。\r\n- 保证每个岛屿至多连出 $18$ 座桥。\r\n\r\n#### 子任务\r\n- **子任务一（$7\\%$）** $N\\le 7$。\r\n- **子任务二（$10\\%$）** $N\\le 50$。\r\n- **子任务三（$12\\%$）** $N\\le 300$。\r\n- **子任务四（$71\\%$）** 没有附加限制。设 $X$ 是你在本子任务测试点中进行最多的执行 `Query()` 的次数。\r\n  - 若 $4\\times 10^4 <X \\le 10^5$，则获得 $49\\%$ 的分数。\r\n  - 若 $X \\le 4 \\times 10^4$，则获得 $71\\%$ 的分数。"}]}