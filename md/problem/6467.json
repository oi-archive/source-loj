{"title":"'Zip' Quine","time_limit":1000,"memory_limit":256,"tags":["提交答案"],"operation":{"submit":"https://loj.ac/problem/6467#submit_code","submissions":"https://loj.ac/submissions?problem_id=6467","statistics":"https://loj.ac/problem/6467/statistics/fastest","testdata":"https://loj.ac/problem/6467/testdata","discussion":"https://loj.ac/discussion/problem/6467"},"statement":[{"title":"题目描述","type":"description","format":"markdown","require":["katex"],"content":"（本题参考功能相同的 <https://wgreenberg.github.io/quine.zip/> 而编写。请注意，本题中对命令合法性的检查比网页中的严格。）\r\n\r\n**与一般的 [Quine](https://loj.ac/problem/4) 相同的是，你需要一个输出自己源代码的程序，而不同的是，这不是你熟悉的什么语言：你只有两个命令可用：`print` 和 `repeat`。**\r\n\r\n- `print count`：程序以下 $count$ 行不执行，直接复制文本到输出。\r\n- `repeat count index`：从程序**输出**的**倒数**第 $index$ 行（从最后一行是 $1$ 开始计数）开始**复制** $count$ 行到输出。**`repeat` 命令自己可以复制自己的输出。**\r\n\r\n（注意，`repeat` 命令其实并不复杂，但是有一点拗口，请参照描述，代码实现和样例仔细理解。）\r\n\r\n使用 C++ 描述的话，将所有的输出储存在 `vector<string> all_output` 中，`print` 的实现如下：\r\n\r\n```cpp\r\nfor (int i = 0; i < count; i ++) {\r\n    string ol;\r\n    getline(input_file, ol)\r\n    all_output.push_back(ol);\r\n}\r\n```\r\n\r\n`repeat` 的实现如下（注意此处 `start + count` **不一定小于** `all_output.size()`。）\r\n\r\n```cpp\r\nint start = all_output.size() - index;\r\n\r\nfor (int i = start; i < start + count; i ++)\r\n    all_output.push_back(all_output[i]);\r\n```\r\n\r\n---\r\n\r\n原网页上对此问题的描述：\r\n\r\n> 这里选用 `print` 和 `repeat` 两个命令是基于 ZIP 文件格式中使用的 LZ77 压缩算法的格式。简单来说，每个 ZIP 文件都是由二进制字节表示的这两个命令组成的。既然我们可以使用这两个命令写出一个 Quine，那么我们也可以写出一个 ZIP 文件使其解压得到……自己。赞！\r\n\r\n[其中描述的 ZIP 文件是真实存在的](https://alf.nu/ZipQuine)。"},{"title":"输入格式","type":"input_format","format":"markdown","require":["katex"],"content":"提交的文件名是 `zipquine.txt`，应包含如下内容：\r\n\r\n每行一个命令，是空格分隔的 `print` 和一个数字，或者 `repeat` 和两个数字。\r\n\r\n请不要输入多余的空格和换行；按照一般规范，文件末尾应有一个换行符。\r\n\r\n程序至少包含一行命令。\r\n\r\n对于 `print count`，应有 $count \\geq 0$，且输入文件在这之后中包含至少 $count$ 行。\r\n\r\n对于 `repeat count index`，应有 $count \\geq 0$，且 $0 < index \\leq N$，其中 $N$ 是执行本 `repeat` 命令**之前**的程序**输出**的行数。"},{"title":"样例","type":"example","format":"markdown","require":["katex"],"content":"以下是一个程序及其输出和解释，它不是本题的解答：\r\n\r\n#### 程序\r\n\r\n```plain\r\nprint 0\r\nprint 2\r\nprint 1\r\nprint 2\r\nrepeat 3 2\r\n```\r\n\r\n#### 输出\r\n\r\n```plain\r\nprint 1\r\nprint 2\r\nprint 1\r\nprint 2\r\nprint 1\r\n```\r\n\r\n#### 解释\r\n\r\n- `print 0` 没有从输入文件复制任何输出，所以没有输出。\r\n- `print 2` 从输入文件复制了其后两行 `print 1` 和 `print 2` 到输出。\r\n- `repeat 3 2` 从输出的倒数第 $2$ 行，也就是 `print 1` 开始复制，共 $3$ 行：（标注 \"\\*\" 表示本次应当复制的行）\r\n  1. 全部输出：\\*`print 1`, `print 2`，复制 `print 1` 到输出。\r\n  2. 全部输出：`print 1`, *`print 2`, `print 1`，复制 `print 2` 到输出。\r\n  3. 全部输出：`print 1`, `print 2`, *`print 1`, `print 2`，复制 `print 1` 到输出。\r\n- 所以最终输出是 `print 1`, `print 2`, `print 1`, `print 2`, `print 1`，与程序不同，不是本题的解答。"},{"title":"数据范围与提示","type":"limit_and_hint","format":"markdown","require":["katex"],"content":"手玩请用网页版：<https://wgreenberg.github.io/quine.zip/>。请注意，本题中对命令合法性的检查比网页中的严格。\r\n\r\n本题的检查器 `zipquine.cpp` 在“测试数据”中提供，可供下载参考。[按照这里所述](https://loj.ac/help)，检查器从 `user_ans` 文件读取输入，将得分输出到 `stdout`，将其它信息输出到 `stderr`。"}]}