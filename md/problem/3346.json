{"title":"「APIO2020」交换城市","time_limit":2000,"memory_limit":512,"tags":["APIO","2020","笛卡尔树 / Kruskal 重构树","LCA"],"operation":{"submit":"https://loj.ac/problem/3346#submit_code","submissions":"https://loj.ac/submissions?problem_id=3346","statistics":"https://loj.ac/problem/3346/statistics/fastest","testdata":"https://loj.ac/problem/3346/testdata","discussion":"https://loj.ac/discussion/problem/3346"},"statement":[{"title":"题目描述","type":"description","format":"markdown","require":["katex"],"content":"注意：**在 LibreOJ 上，由于语言限制，目前只支持以下语言的提交：**\r\n- C++ 11\r\n- C++ 11 (Clang)\r\n- C++ 11 (NOI)\r\n- C++ 17\r\n- C++ 17 (Clang)\r\n\r\n印度尼西亚有 $N$ 个城市以及 $M$ 条双向道路，城市从 $0$ 到 $N − 1$ 编号，道路从 $0$ 到 $M − 1$ 编号。每条道路连接着两个不同的城市，第 $i$ 条道路连接第 $U_i$ 个城市与第 $V_i$ 个城市，汽车行驶这条道路将耗费 $W_i$ 个单位汽油。通过这些道路，任意两个城市间能够互相到达。\r\n\r\n接下来的 $Q$ 天中, 每天会有一对城市希望建立政治关系。具体来说，第 $j$ 天，第 $X_j$ 个城市想要和第 $Y_j$ 个城市建立政治关系。为此，第 $X_j$ 个城市将会派一名代表坐汽车前往第 $Y_j$ 个城市。同样地，第 $Y_j$ 个城市也会派一名代表坐汽车前往第 $X_j$ 个城市。\r\n\r\n为了避免拥塞，两辆车不应在任何时间点碰面。更具体地，两辆车不能在同一个时间点出现在同一个城市。同样地，两辆车也不应该沿相反的方向同时行驶过同一条道路。另外，汽车行驶过一条道路时必须完整经过道路并到达道路另一端的城市（换句话说，汽车不允许在道路中间掉转方向）。但是，汽车可以多次到达一个城市或是多次经过一条道路。此外，汽车可以在任何时间在任何城市等候。\r\n\r\n由于高燃料容量汽车的价格昂贵，两个城市都分别希望选择一条路线，使得两辆汽车所需的最大单位汽油容量最小。每个城市中都有加油站并且供油量是无限的，因此汽车所需的单位汽油容量实际上就是行驶过的道路中最大的单位汽油消耗量。\r\n\r\n#### 实现细节\r\n\r\n你必须引用 `swap.h` 头文件。\r\n\r\n你必须实现 `init` 和 `getMinimumFuelCapacity` 函数。\r\n\r\n```cpp\r\nvoid init(int N, int M, std::vector<int> U, std::vector<int> V, std::vector<int> W)\r\n```\r\n该函数将在所有 `getMinimumFuelCapacity` 的调用前被评测库恰好调用一次。\r\n  * $N$：一个整数表示城市数。\r\n  * $M$：一个整数表示道路数。\r\n  * $U$：一个长为 $M$ 的整数序列表示道路的第一个端点城市。\r\n  * $V$：一个长为 $M$ 的整数序列表示道路的第二个端点城市。\r\n  * $W$：一个长为 $M$ 的整数序列表示道路的汽油消耗。\r\n\r\n```cpp\r\nint getMinimumFuelCapacity(int X, int Y)\r\n```\r\n该函数将被评测库调用恰好 $Q$ 次。\r\n   * $X$：一个整数表示第一个城市。  \r\n   * $Y$：一个整数表示第二个城市。  \r\n   * 该函数必须返回一个整数，表示根据题目描述中的规则，两辆分别从第 $X$ 个城市与第 $Y$ 个城市出发要到达彼此城市的车，它们的单位汽油容量最大值的最小值。若无法满足题目规则则返回 $−1$。\r\n\r\n#### 样例评测库\r\n样例评测库将读入以下格式的数据：\r\n\r\n```\r\nN M\r\nU[0] V[0] W[0]\r\nU[1] V[1] W[1]\r\n.\r\n.\r\n.\r\nU[M-1] V[M-1] W[M-1]\r\nQ\r\nX[0] Y[0]\r\nX[1] Y[1]\r\n.\r\n.\r\n.\r\nX[Q-1] Y[Q-1]\r\n```\r\n\r\n对每个 `getMinimumFuelCapacity` 的调用，样例评测库会输出该函数的返回值。\r\n"},{"title":"样例","type":"example","format":"markdown","require":["katex"],"content":"下面的输入输出是对于样例评测库而言的。\r\n\r\n#### 样例输入 1\r\n\r\n```plain\r\n5 6\r\n0 1 4\r\n0 2 4\r\n1 2 1\r\n1 3 2\r\n1 4 10\r\n2 3 3\r\n3\r\n1 2\r\n2 4\r\n0 1\r\n```\r\n\r\n#### 样例输出 1\r\n\r\n```plain\r\n3\r\n10\r\n4\r\n```\r\n\r\n#### 样例解释 1\r\n\r\n$N = 5$, $M = 6$，$U = [0, 0, 1, 1, 1, 2]$，$V = [1, 2, 2, 3, 4, 3]$，$W = [4, 4, 1, 2, 10, 3]$，$Q = 3$，$X = [1, 2, 0]$，$Y = [2, 4, 1]$。如下图：\r\n\r\n![swap1.png](https://loj-img.upyun.menci.memset0.cn/2020/08/26/5f46264090570.png)\r\n\r\n评测库初始时将调用 `init(5, 6, [0, 0, 1, 1, 1, 2], [1, 2, 2, 3, 4, 3], [4, 4, 1, 2, 10, 3])`。之后，评测库将进行如下函数调用：\r\n\r\n`getMinimumFuelCapacity(1, 2)`。首先，从第一个城市出发的汽车可以行驶到第三个城市。接着，从第二个城市出发的汽车可以行驶到第一个城市，并且在第三个城市的汽车可以行驶到第二个城市。因此，最大的单位汽油容量为 $3$（从第三个城市到第二个城市需要花费 $3$ 个单位汽油）。没有其他更优的路线方案，因此该函数应该返回 $3$。  \r\n`getMinimumFuelCapacity(2, 4)`。任何从第四个城市出发或要到达第四个城市的汽车都需要耗费 $10$ 个单位汽油，因此该函数应该返回 $10$。  \r\n`getMinimumFuelCapacity(0, 1)`。该函数应该返回 $4$。\r\n\r\n#### 样例输入 2\r\n\r\n```plain\r\n3 2\r\n0 1 5\r\n0 2 5\r\n1\r\n1 2\r\n```\r\n\r\n#### 样例输出 2\r\n\r\n```plain\r\n-1\r\n```\r\n\r\n#### 样例解释 2\r\n\r\n$N=3$，$M = 2$，$U = [0, 0]$，$V = [1, 2]$，$W = [5, 5]$，$Q = 1$，$X = [1]$，$Y = [2]$。如下图：\r\n\r\n![swap2.png](https://loj-img.upyun.menci.memset0.cn/2020/08/26/5f46263f63247.png)\r\n\r\n评测库初始时将调用 `init(3, 2, [0, 0], [1, 2], [5, 5])` 之后，评测库将进行如下函数调用：\r\n\r\n`getMinimumFuelCapacity(1, 2)`。两辆车无法满足不在同一时间点碰面的要求，所以该函数应该返回 $-1$。"},{"title":"数据范围与提示","type":"limit_and_hint","format":"markdown","require":["katex"],"content":"对于 $100\\%$ 的数据，保证：\r\n\r\n* $2 \\leq N \\leq 10^5$\r\n* $N − 1 \\leq M \\leq 2 \\times 10^5$\r\n* $0 \\leq U[i] < V [i] < N$\r\n* 任意两个城市间至多存在一条道路直接相连。\r\n* 任意两个城市经过道路可以互相到达。\r\n* $1 \\leq W[i] \\leq 10^9$\r\n* $1 \\leq Q \\leq 2 \\times 10^5$\r\n* $0 \\leq X[j] < Y [j] < N$\r\n\r\n| 子任务 |              附加限制              | 分值 |\r\n| :----: | :--------------------------------: | :--: |\r\n|  $1$   | 每个城市至多是两条道路的一个端点。 | $6$  |\r\n|  $2$   |       $M = N − 1, U[i] = 0$        | $7$  |\r\n|  $3$   |   $Q\\le 5, N\\le 1000, M\\le 2000$   | $17$ |\r\n|  $4$   |              $Q\\le 5$              | $20$ |\r\n|  $5$   |              $M=N-1$               | $23$ |\r\n|  $6$   |                                    | $27$ |\r\n\r\n"}]}